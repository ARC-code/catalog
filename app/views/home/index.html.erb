<p id="notice"><%= notice %></p>
<p id="alert"><%= alert %></p>
<div class="nav_outer">
<ul class="nav">
	<li><a href="#overview">Overview</a></li>
	<li><a href="#totals">Totals</a></li>
	<li><a href="#search">Search</a></li>
	<li><a href="#autocomplete">Autocomplete</a></li>
	<li><a href="#names">Names Faceting</a></li>
	<li><a href="#uri">URI</a></li>
	<li><a href="#meta">Meta</a></li>
</ul>
</div>
<div class="tab_content">
<div id="tab_overview" class="individual_tab hidden">
	<h3>Arc Catalog</h3>
	<p>The Arc Catalog is a collection of documents that can be searched through.</p>
	<p>To use, call this in one of the ways indicated. It is designed to be used as a web service, but you can also type the
		values into your browser to interactively test your parameters. If you leave off the ".xml" in the following calls,
		the results will be formatted better for a browser.
	</p>

	<h3>API: The following questions on the format are unresolved:</h3>
	<ul>
		<li>Create a new search type for OAI-type queries.</li>
		<li>Study OAI: Should that change the parameters of our regular search?</li>
		<li>The plus sign is used in a lot of places, but that needs to be escaped. It seems like that is a place that will annoy and trip up visitors.</li>
		<li>The question mark and asterisk may also be an annoyance in the same way.</li>
		<li>Should parentheses be allowed in the search?</li>
		<li>For multiple parameters, they should get specified like: +never-more, but the hyphen seems to work like quotes instead.</li>
		<li>Where should validation be done? Should the format of the q parameter be tight so that the client site must parse the
			user's input, or should anything be let through, and we just monitor the return from solr and let solr validate?
		</li>
		<li>What type of statistics should be kept on the searches that are performed? All searches can be stored in the db by date, with requesting IP and date.
			The actual requesting user is not passed, so the IP would be the installation. If the end user should be logged, then it needs to be passed as a parameter.
			Or, all <em>unique</em> searches could be kept, with a count of how many times they have been called, and perhaps the date of the first call and the date of the most
			recent call.
		</li>
		<li>The output structure for the XML has not been determined. The default format from the automatic conversion in rails seems clunky.
			Some research needs to be done to see if there is an XML format that would seem most natural to a scholar.
		</li>
		<li>What output formats should be allowed? Currently, if no format is specified, HTML is returned. XML can be specified as a format.
			We probably want to expand that to also include RDF, and possibly JSON and RUBY.
		</li>
		<li>should queries without plus and minus to be allowed like they are in solr to mean "not required, but raises relevancy"?</li>
		<li>Do we need the scaffold for the genres at all? The list of possible names can be retrieved from solr.</li>
	</ul>
</div>

<div id="tab_totals" class="individual_tab hidden">
	<h3>Totals</h3>
	<p>This gives an overview of the number of documents and the number of archives that are in the catalog.</p>
	<p>Call <%= example_link("/search/totals.xml") %> to get a list of all the federations and how many documents and archives they contain.</p>
</div>

<div id="tab_search" class="individual_tab hidden">
	<h3>Full Text Searching</h3>
	<p>Any field that is collected can be searched for, including the full text of the document.</p>
	<p>Note: All searches are case-insensitive and punctuation cannot be searched for.</p>
	<p>Call /search.xml with the following parameters:</p>
	<%= render :partial => 'params', :locals => { :params => @query_params } %>
	<p>Example: Search for all mention of "tree" by Williams: <%= example_link("/search.xml?q=%2btree&aut=%2bWilliams") %></p>
</div>

<div id="tab_autocomplete" class="individual_tab hidden">
	<h3>Searching to Facilitate Autocompletion</h3>
	<p>A query can be submitted character by character to allow you to prompt the user for queries that will succeed.
		You can specify the number of items that you want to present, and the results will contain the number of hits
		that the queries will generate.
	</p>
	<p>This is designed to be used to implement autocomplete functionality. Either the entire index can be searched with auto complete
		or you may search just a portion of the index by including other parameters.
	</p>
	<p>Call /search/autocomplete.xml with the following parameters:</p>
	<%= render :partial => 'params', :locals => { :params => @autocomplete_params } %>
	<p>Example: Autocomplete "tre" by Williams: <%= example_link("/search/autocomplete.xml?frag=tre&aut=%2bWilliams") %></p>
</div>

<div id="tab_names" class="individual_tab hidden">
	<h3>Names Faceting</h3>
	<p>This is to get a list of all the names (authors, publishers, and editors) that are associated with a particular query.</p>
	<p>Call /search/names.xml with the following parameters:</p>
	<%= render :partial => 'params', :locals => { :params => @names_params } %>
	<p>Example: All authors, publishers, and editors who mention "tree" and Williams: <%= example_link("/search/names.xml?q=%2btree%2bWilliams") %></p>
</div>

<div id="tab_uri" class="individual_tab hidden">
	<h3>Querying for a particular object.</h3>
	<p>This is designed to get a specific object if you already know what the object is. Usually it would be used if you had already done a search in the past.
		You can save the uri from the first search, and retrieve the details later using this call.
	</p>
	<p>Call /search.xml with the following parameters:</p>
	<%= render :partial => 'params', :locals => { :params => @uri_params } %>
	<p>Example: A document by Whitman: <%= example_link("/search/http%3a%2f%2fwww%2ewhitmanarchive%2eorg%2fcriticism%2freviews%2fleaves%2fleaves55%2fdailytimes") %></p>
</div>

<div id="tab_meta" class="individual_tab hidden">
	<h3>Other information</h3>
	<p>You can also get information about the items that make up the index with one of these calls:</p>
	<p><%= example_link("/archives.xml") %> : To get a list of all the possible archives, and their parameters.</p>
	<p><%= example_link("/genres.xml") %> : To get a list of all the possible genres</p>
	<p><%= example_link("/federations.xml") %> : To get a list of all the possible federations, and their thumbnails.</p>
</div>
</div> <%# tab content %>

<div class="admin">
<% if user_signed_in? %>
	<%= link_to "Manage genres", genres_path %> | <%= link_to "Manage archives", archives_path %> | <%= link_to "Manage federations", federations_path %> | <%= link_to "Log out", destroy_user_session_path %>
<% else %>
<%= link_to "admin", new_user_session_path %>
<% end %>
</div>